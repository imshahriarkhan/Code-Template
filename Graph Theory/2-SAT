#include<bits/stdc++.h>
using namespace std ;

#define Not(x) ((x)^1)
#define var(x) (2*(x))
#define zero(x) (2*(x))
#define one(x) (2*(x) + 1)

struct twoSAT
{
    int n ;

    vector<vector<int> > g , gt ;

    vector<int> ord , vis , comp , a ;

    twoSAT(int siz)
    {
        n = siz ;
        g.resize(2*n) ;
        gt.resize(2*n) ;
        vis = vector<int> (2*n,0) ;
        comp = vector<int> (2*n,0) ;
        a = vector<int> (2*n,0) ;
    }

    void addImp(int u , int v)
    {
        g[u].push_back(v) ;
        gt[v].push_back(u) ;
    }

    void forceTrue(int x)
    {
        addImp(Not(x),x) ;
    }

    void addOr(int x , int y)
    {
        addImp(Not(x),y) ;
        addImp(Not(y),x) ;
    }

    void addXor(int x , int y)
    {
        addOr(x,y) ;
        addOr(Not(x),Not(y)) ;
    }

    void dfs(int u)
    {
        vis[u] = 1 ;
        for(int v : g[u])
        {
            if(vis[v]) continue ;
            dfs(v) ;
        }
        ord.push_back(u) ;
    }

    void color(int u , int c)
    {
        comp[u] = c ;
        for(int v : g[u])
        {
            if(comp[v]) continue ;
            color(v,c) ;
        }
    }

    bool check()
    {
        int V = 2*n ;
        for(int i = 0 ; i < V ; ++i)
        {
            if(!vis[i]) dfs(i) ;
        }
        for(int i = V - 1 , col = 0 ; i >= 0 ; --i)
        {
            int v = ord[i] ;
            if(!comp[v]) color(v,++col) ;
        }
        for(int i = 0 ; i < V ; ++i)
        {
            if(comp[i]==comp[Not(i)]) return 0 ;
            a[i] = comp[i] > comp[Not(i)] ;
        }
        return 1 ;
    }

    vector<int> return_ans()
    {
        return a ;
    }
};
